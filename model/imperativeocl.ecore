<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="expression"
    nsURI="http://www.orcas.org/spec/iocl/1.0/expression" nsPrefix="expression">
  <eSubpackages name="emof" nsURI="http://www.orcas.org/spec/iocl/1.0/emof" nsPrefix="emof">
    <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//emof/Type">
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
          eType="#//emof/Property" containment="true" eOpposite="#//emof/Property/class"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedOperation" upperBound="-1"
          eType="#//emof/Operation" containment="true" eOpposite="#//emof/Operation/class"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" upperBound="-1"
          eType="#//emof/Class"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="#//emof/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="#//emof/Type"/>
    <eClassifiers xsi:type="ecore:EClass" name="Element" abstract="true" eSuperTypes="#//emof/Object">
      <eStructuralFeatures xsi:type="ecore:EReference" name="tag" upperBound="-1"
          eType="#//emof/Tag" eOpposite="#//emof/Tag/element"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedComment" upperBound="-1"
          eType="#//emof/Comment" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Tag" eSuperTypes="#//emof/Element">
      <eStructuralFeatures xsi:type="ecore:EReference" name="element" upperBound="-1"
          eType="#//emof/Element" eOpposite="#//emof/Element/tag"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#//emof/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//emof/DataType">
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1"
          eType="#//emof/EnumerationLiteral" containment="true" eOpposite="#//emof/EnumerationLiteral/enumeration"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="#//emof/Element">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Extent" eSuperTypes="#//emof/Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="Object"/>
    <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//emof/MultiplicityElement #//emof/TypedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="class" lowerBound="1"
          eType="#//emof/Class" transient="true" eOpposite="#//emof/Class/ownedOperation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedParameter" upperBound="-1"
          eType="#//emof/Parameter" containment="true" eOpposite="#//emof/Parameter/operation"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="raisedException" upperBound="-1"
          eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" abstract="true">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="#//emof/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//emof/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="#//emof/Integer"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="#//emof/UnlimitedNatural"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="#//emof/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="ownedType" upperBound="-1"
          eType="#//emof/Type" containment="true" eOpposite="#//emof/Type/package"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" upperBound="-1"
          eType="#//emof/Package" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="uri" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="#//emof/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="package" lowerBound="1"
          eType="#//emof/Package" transient="true" eOpposite="#//emof/Package/ownedType"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//emof/MultiplicityElement #//emof/TypedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="operation" eType="#//emof/Operation"
          transient="true" eOpposite="#//emof/Operation/ownedParameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#//emof/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" eType="#//emof/Enumeration"
          transient="true" eOpposite="#//emof/Enumeration/ownedLiteral"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="#//emof/MultiplicityElement #//emof/TypedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="class" lowerBound="1"
          eType="#//emof/Class" transient="true" eOpposite="#//emof/Class/ownedAttribute"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" eType="#//emof/Property"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="#//emof/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" eType="#//emof/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" eType="#//emof/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isId" eType="#//emof/Boolean"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="#//emof/NamedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#//emof/DataType"/>
    <eClassifiers xsi:type="ecore:EClass" name="URIExtent" eSuperTypes="#//emof/Extent"/>
    <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
    <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
    <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="java.lang.Integer"/>
    <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
    <eClassifiers xsi:type="ecore:EDataType" name="Real" instanceClassName="java.lang.Double"/>
    <eClassifiers xsi:type="ecore:EClass" name="Comment" eSuperTypes="#//emof/Element">
      <eStructuralFeatures xsi:type="ecore:EReference" name="annotatedElement" upperBound="-1"
          eType="#//emof/NamedElement"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="imperativeocl" nsURI="http://www.orcas.org/spec/iocl/1.0/imperativeocl"
      nsPrefix="imperativeocl">
    <eClassifiers xsi:type="ecore:EClass" name="AssignExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="left" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="defaultValue" eType="#//imperativeocl/OclExpression"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReset" eType="#//emof/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="BlockExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="body" upperBound="-1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SwitchExp" eSuperTypes="#//imperativeocl/CallExp #//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="alternativePart" upperBound="-1"
          eType="#//imperativeocl/AltExp" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="elsePart" eType="#//imperativeocl/OclExpression"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VariableInitExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="referredVariable" lowerBound="1"
          eType="#//imperativeocl/Variable" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="withResult" eType="#//emof/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="WhileExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ComputeExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="returnedElement" lowerBound="1"
          eType="#//imperativeocl/Variable" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AltExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UnlinkExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="item" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ReturnExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="BreakExp" eSuperTypes="#//imperativeocl/ImperativeExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="TryExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="tryBody" upperBound="-1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="catchClause" upperBound="-1"
          eType="#//imperativeocl/CatchExp" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RaiseExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="exception" lowerBound="1"
          eType="#//emof/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="argument" eType="#//imperativeocl/OclExpression"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="exceptionMessage" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ContinueExp" eSuperTypes="#//imperativeocl/ImperativeExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="ForExp" eSuperTypes="#//imperativeocl/ImperativeLoopExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="Typedef" eSuperTypes="#//emof/Class">
      <eStructuralFeatures xsi:type="ecore:EReference" name="base" lowerBound="1"
          eType="#//emof/Type"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#//imperativeocl/OclExpression"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstantiationExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="instantiatedClass" lowerBound="1"
          eType="#//emof/Class"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extent" eType="#//imperativeocl/Variable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="argument" upperBound="-1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DictionaryType" eSuperTypes="#//imperativeocl/CollectionType">
      <eStructuralFeatures xsi:type="ecore:EReference" name="keyType" eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DictLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp">
      <eStructuralFeatures xsi:type="ecore:EReference" name="part" upperBound="-1"
          eType="#//imperativeocl/DictLiteralPart" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="DictLiteralPart" eSuperTypes="#//emof/Element">
      <eStructuralFeatures xsi:type="ecore:EReference" name="key" lowerBound="1" eType="#//imperativeocl/OclExpression"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TemplateParameterType" eSuperTypes="#//emof/Type">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="specification" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LogExp" eSuperTypes="#//imperativeocl/OperationCallExp #//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#//imperativeocl/OclExpression"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="text" eType="#//emof/String"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="level" eType="#//emof/Integer"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AssertExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="severity" eType="#//imperativeocl/SeverityKind"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="log" eType="#//imperativeocl/LogExp"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="assertion" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="SeverityKind">
      <eLiterals name="error"/>
      <eLiterals name="warning" value="1"/>
      <eLiterals name="fatal" value="2"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ImperativeLoopExp" abstract="true"
        eSuperTypes="#//imperativeocl/LoopExp #//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#//imperativeocl/OclExpression"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ImperativeIterateExp" eSuperTypes="#//imperativeocl/ImperativeLoopExp">
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="#//imperativeocl/Variable"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ImperativeExpression" abstract="true"
        eSuperTypes="#//imperativeocl/OclExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnpackExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="targetVariable" lowerBound="1"
          upperBound="-1" eType="#//imperativeocl/Variable" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedTupleType" eSuperTypes="#//emof/Class">
      <eStructuralFeatures xsi:type="ecore:EReference" name="elementType" upperBound="-1"
          eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedTupleLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp">
      <eStructuralFeatures xsi:type="ecore:EReference" name="part" upperBound="-1"
          eType="#//imperativeocl/OrderedTupleLiteralPart" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedTupleLiteralPart" eSuperTypes="#//emof/Element">
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ListType" eSuperTypes="#//imperativeocl/CollectionType"/>
    <eClassifiers xsi:type="ecore:EClass" name="CatchExp" eSuperTypes="#//imperativeocl/ImperativeExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="body" upperBound="-1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="exception" upperBound="-1"
          eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="BooleanLiteralExp" eSuperTypes="#//imperativeocl/PrimitiveLiteralExp">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="booleanSymbol" eType="#//emof/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CallExp" abstract="true" eSuperTypes="#//imperativeocl/OclExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="source" eType="#//imperativeocl/OclExpression"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EEnum" name="CollectionKind">
      <eLiterals name="Set"/>
      <eLiterals name="OrderedSet" value="1"/>
      <eLiterals name="Bag" value="2"/>
      <eLiterals name="Sequence" value="3"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OclExpression" abstract="true" eSuperTypes="#//emof/TypedElement #//util/Visitable"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnlimitedNaturalExp" eSuperTypes="#//imperativeocl/NumericLiteralExp">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="symbol" eType="#//emof/UnlimitedNatural"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="IfExp" eSuperTypes="#//imperativeocl/OclExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="thenExpression" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="elseExpression" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LetExp" eSuperTypes="#//imperativeocl/OclExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="in" lowerBound="1" eType="#//imperativeocl/OclExpression"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="variable" lowerBound="1"
          eType="#//imperativeocl/Variable" containment="true" eOpposite="#//imperativeocl/Variable/letExp"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Variable" eSuperTypes="#//emof/TypedElement #//util/Visitable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="initExpression" eType="#//imperativeocl/OclExpression"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="letExp" eType="#//imperativeocl/LetExp"
          transient="true" eOpposite="#//imperativeocl/LetExp/variable"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="bindParameter" eType="#//emof/Parameter"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PropertyCallExp" eSuperTypes="#//imperativeocl/FeaturePropertyCall">
      <eStructuralFeatures xsi:type="ecore:EReference" name="referredProperty" eType="#//emof/Property"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="VariableExp" eSuperTypes="#//imperativeocl/OclExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="referredVariable" eType="#//imperativeocl/Variable"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeExp" eSuperTypes="#//imperativeocl/OclExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="referredType" eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LoopExp" abstract="true" eSuperTypes="#//imperativeocl/CallExp #//imperativeocl/OclExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="body" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="iterator" upperBound="-1"
          eType="#//imperativeocl/Variable" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="IteratorExp" eSuperTypes="#//imperativeocl/LoopExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="StringLiteralExp" eSuperTypes="#//imperativeocl/PrimitiveLiteralExp">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="stringSymbol" eType="#//emof/String"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="IntegerLiteralExp" eSuperTypes="#//imperativeocl/NumericLiteralExp">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="integerSymbol" eType="#//emof/Integer"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OperationCallExp" eSuperTypes="#//imperativeocl/FeaturePropertyCall">
      <eStructuralFeatures xsi:type="ecore:EReference" name="argument" upperBound="-1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="referredOperation" eType="#//emof/Operation"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="operationCode" eType="#//emof/Integer"/>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="isImperativeOperation"
          eType="#//emof/Boolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RealLiteralExp" eSuperTypes="#//imperativeocl/NumericLiteralExp">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="realSymbol" eType="#//emof/Real"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LiteralExp" abstract="true" eSuperTypes="#//imperativeocl/OclExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="IterateExp" eSuperTypes="#//imperativeocl/LoopExp">
      <eStructuralFeatures xsi:type="ecore:EReference" name="result" eType="#//imperativeocl/Variable"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrimitiveLiteralExp" abstract="true"
        eSuperTypes="#//imperativeocl/LiteralExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="NumericLiteralExp" abstract="true"
        eSuperTypes="#//imperativeocl/PrimitiveLiteralExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="CollectionLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//imperativeocl/CollectionKind"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="part" upperBound="-1"
          eType="#//imperativeocl/CollectionLiteralPart" containment="true" eOpposite="#//imperativeocl/CollectionLiteralPart/collectionLiteralExp"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CollectionLiteralPart" abstract="true"
        eSuperTypes="#//emof/TypedElement #//util/Visitable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="collectionLiteralExp"
          lowerBound="1" eType="#//imperativeocl/CollectionLiteralExp" transient="true"
          eOpposite="#//imperativeocl/CollectionLiteralExp/part"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CollectionItem" eSuperTypes="#//imperativeocl/CollectionLiteralPart">
      <eStructuralFeatures xsi:type="ecore:EReference" name="item" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CollectionRange" eSuperTypes="#//imperativeocl/CollectionLiteralPart">
      <eStructuralFeatures xsi:type="ecore:EReference" name="first" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="last" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TupleLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp">
      <eStructuralFeatures xsi:type="ecore:EReference" name="part" upperBound="-1"
          eType="#//imperativeocl/TupleLiteralPart" containment="true" eOpposite="#//imperativeocl/TupleLiteralPart/tupleLiteralExp"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NullLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExpressionInOcl" eSuperTypes="#//imperativeocl/OpaqueExpression">
      <eStructuralFeatures xsi:type="ecore:EReference" name="bodyExpression" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="context" eType="#//imperativeocl/Variable"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="resultVariable" eType="#//imperativeocl/Variable"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="parameterVariable" eType="#//imperativeocl/Variable"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OpaqueExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="InvalidLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="FeaturePropertyCall" abstract="true"
        eSuperTypes="#//imperativeocl/CallExp"/>
    <eClassifiers xsi:type="ecore:EClass" name="TupleLiteralPart" eSuperTypes="#//emof/TypedElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="tupleLiteralExp" eType="#//imperativeocl/TupleLiteralExp"
          transient="true" eOpposite="#//imperativeocl/TupleLiteralExp/part"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" eType="#//emof/Property"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#//imperativeocl/OclExpression" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="BagType" eSuperTypes="#//imperativeocl/CollectionType"/>
    <eClassifiers xsi:type="ecore:EClass" name="CollectionType" abstract="true" eSuperTypes="#//emof/DataType">
      <eStructuralFeatures xsi:type="ecore:EReference" name="elementType" eType="#//emof/Type"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EnumLiteralExp" eSuperTypes="#//imperativeocl/LiteralExp">
      <eStructuralFeatures xsi:type="ecore:EReference" name="referredEnumLiteral"
          eType="#//emof/EnumerationLiteral"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InvalidType" eSuperTypes="#//emof/Type"/>
    <eClassifiers xsi:type="ecore:EClass" name="OrderedSetType" eSuperTypes="#//imperativeocl/CollectionType"/>
    <eClassifiers xsi:type="ecore:EClass" name="SequenceType" eSuperTypes="#//imperativeocl/CollectionType"/>
    <eClassifiers xsi:type="ecore:EClass" name="SetType" eSuperTypes="#//imperativeocl/CollectionType"/>
    <eClassifiers xsi:type="ecore:EClass" name="TupleType" eSuperTypes="#//emof/Class #//emof/DataType"/>
    <eClassifiers xsi:type="ecore:EClass" name="VoidType" eSuperTypes="#//emof/Type"/>
    <eClassifiers xsi:type="ecore:EClass" name="AnyType" eSuperTypes="#//emof/Class #//emof/Type"/>
  </eSubpackages>
  <eSubpackages name="util" nsURI="http://www.orcas.org/spec/iocl/1.0/util" nsPrefix="util">
    <eClassifiers xsi:type="ecore:EClass" name="Visitable" abstract="true" interface="true">
      <eOperations name="accept">
        <eGenericType eTypeParameter="#//util/Visitable/accept/T"/>
        <eTypeParameters name="T"/>
        <eTypeParameters name="V">
          <eBounds eClassifier="#//util/Visitor">
            <eTypeArguments eTypeParameter="#//util/Visitable/accept/T"/>
          </eBounds>
        </eTypeParameters>
        <eParameters name="v">
          <eGenericType eTypeParameter="#//util/Visitable/accept/V"/>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Visitor" abstract="true" interface="true">
      <eTypeParameters name="T"/>
      <eOperations name="visitAltExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="altExp" eType="#//imperativeocl/AltExp"/>
      </eOperations>
      <eOperations name="visitAssignExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="assignExp" eType="#//imperativeocl/AssignExp"/>
      </eOperations>
      <eOperations name="visitBlockExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="blockExp" eType="#//imperativeocl/BlockExp"/>
      </eOperations>
      <eOperations name="visitBooleanLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="booleanLiteralExp" eType="#//imperativeocl/BooleanLiteralExp"/>
      </eOperations>
      <eOperations name="visitBreakExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="breakExp" eType="#//imperativeocl/BreakExp"/>
      </eOperations>
      <eOperations name="visitCatchExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="catchExp" eType="#//imperativeocl/CatchExp"/>
      </eOperations>
      <eOperations name="visitCollectionLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="collectionLiteralExp" eType="#//imperativeocl/CollectionLiteralExp"/>
      </eOperations>
      <eOperations name="visitCollectionItem">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="collectionItem" eType="#//imperativeocl/CollectionItem"/>
      </eOperations>
      <eOperations name="visitComputeExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="computeExp" eType="#//imperativeocl/ComputeExp"/>
      </eOperations>
      <eOperations name="visitContinueExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="continueExp" eType="#//imperativeocl/ContinueExp"/>
      </eOperations>
      <eOperations name="visitDictLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="dictLiteralExp" eType="#//imperativeocl/DictLiteralExp"/>
      </eOperations>
      <eOperations name="visitEnumLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="enumLiteralExp" eType="#//imperativeocl/EnumLiteralExp"/>
      </eOperations>
      <eOperations name="visitForExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="forExp" eType="#//imperativeocl/ForExp"/>
      </eOperations>
      <eOperations name="visitInstantiationExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="instantiationExp" eType="#//imperativeocl/InstantiationExp"/>
      </eOperations>
      <eOperations name="visitIntegerLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="integerLiteralExp" eType="#//imperativeocl/IntegerLiteralExp"/>
      </eOperations>
      <eOperations name="visitIterateExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="iterateExp" eType="#//imperativeocl/IterateExp"/>
      </eOperations>
      <eOperations name="visitIteratorExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="iteratorExp" eType="#//imperativeocl/IteratorExp"/>
      </eOperations>
      <eOperations name="visitLogExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="logExp" eType="#//imperativeocl/LogExp"/>
      </eOperations>
      <eOperations name="visitOperationCallExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="operationCallExp" eType="#//imperativeocl/OperationCallExp"/>
      </eOperations>
      <eOperations name="visitNullLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="nullLiteralExp" eType="#//imperativeocl/NullLiteralExp"/>
      </eOperations>
      <eOperations name="visitPropertyCallExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="propertyCallExp" eType="#//imperativeocl/PropertyCallExp"/>
      </eOperations>
      <eOperations name="visitRaiseExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="raiseExp" eType="#//imperativeocl/RaiseExp"/>
      </eOperations>
      <eOperations name="visitRealLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="realLiteralExp" eType="#//imperativeocl/RealLiteralExp"/>
      </eOperations>
      <eOperations name="visitReturnExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="returnExp" eType="#//imperativeocl/ReturnExp"/>
      </eOperations>
      <eOperations name="visitStringLiteralExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="stringLiteralExp" eType="#//imperativeocl/StringLiteralExp"/>
      </eOperations>
      <eOperations name="visitSwitchExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="switchExp" eType="#//imperativeocl/SwitchExp"/>
      </eOperations>
      <eOperations name="visitTryExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="tryExp" eType="#//imperativeocl/TryExp"/>
      </eOperations>
      <eOperations name="visitTypeExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="typeExp" eType="#//imperativeocl/TypeExp"/>
      </eOperations>
      <eOperations name="visitVariable">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="variable" eType="#//imperativeocl/Variable"/>
      </eOperations>
      <eOperations name="visitVariableExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="variableExp" eType="#//imperativeocl/VariableExp"/>
      </eOperations>
      <eOperations name="visitVariableInitExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="variableInitExp" eType="#//imperativeocl/VariableInitExp"/>
      </eOperations>
      <eOperations name="visitWhileExp">
        <eGenericType eTypeParameter="#//util/Visitor/T"/>
        <eParameters name="whileExp" eType="#//imperativeocl/WhileExp"/>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
